# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
  branches:
    include:
    - master
  paths:
    exclude:
    - **/DotnetFramework.Test/*

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

#Excellent docs on .NET Core steps: https://docs.microsoft.com/en-us/azure/devops/pipelines/ecosystems/dotnet-core?view=azure-devops#feedback
steps:
- script: set
  displayName: show all variables

- task: DotNetCoreCLI@2
  displayName: Restore
  inputs:
    command: restore
    projects: '**/*.csproj'

- task: DotNetCoreCLI@2
  displayName: Build
  inputs:
    command: build
    projects: '**/*.csproj'
    arguments: '--configuration Release' # Update this to match your need


#need to use the vso tasks so that the env variables persist trhough tasks in ADO
- powershell: |
   Write-Host "Our Sauce Username in ADO is=> $($env:SAUCE_USER)";
   Write-Host "Our Sauce Access Key in ADO is=> $($env:SAUCE_KEY)";
   Write-Host "System.DefaultWorkingDirectory=>$(System.DefaultWorkingDirectory)"
   Write-Host "Build.ArtifactStagingDirectory=>$(Build.ArtifactStagingDirectory)"
   Write-Host ("##vso[task.setvariable variable=SAUCE_USERNAME]$($env:SAUCE_USER)")
   Write-Host ("##vso[task.setvariable variable=SAUCE_ACCESS_KEY]$($env:SAUCE_KEY)")

- task: DotNetCoreCLI@2
  displayName: 'Run tests'
  inputs:
    command: test
    projects: '**/*Test/*.csproj'
    arguments: '--configuration $(buildConfiguration)'

# Pack a NuGet package to a test directory
- task: DotNetCoreCLI@2
  displayName: 'Pack NuGet'
  inputs: 
    command: 'pack'
    outputDir: '$(Build.ArtifactStagingDirectory)/TestDir'

- task: NuGetCommand@2
  displayName: publish
  condition: and(succeeded(), or(eq(variables['Build.SourceBranchName'], 'master'),eq(variables['Build.SourceBranchName'], 'develop')))
  inputs:
    command: push
    nuGetFeedType: external
    publishFeedCredentials: 'NuGet'
    packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg'